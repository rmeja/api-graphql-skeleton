#!/usr/bin/env node

const app = require('../src/app');
const debug = require('debug')('express-app:server');
const https = require('https');
const models = require('../src/models');
const fs = require('fs');
const path = require('path');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const options = {
  key: fs.readFileSync(path.resolve('bin/server.key')),
  cert: fs.readFileSync(path.resolve('bin/server.crt'))
};

const server = https.createServer(options, app);

models.sequelize.sync().then(function () {
  server.listen(port, () => {
    console.log('Express server listening on port ' + server.address().port);
    const env = process.env.NODE_ENV || 'production';
    if (env === 'development') console.log(`GraphiQL is available in https://localhost:${server.address().port}/graphiql`);
  });
  server.on('error', onError);
  server.on('listening', onListening);
});

function normalizePort (val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }

  if (port >= 0) {
    return port;
  }

  return false;
}

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      return process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      return process.exit(1);
    default:
      throw error;
  }
}

function onListening () {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
